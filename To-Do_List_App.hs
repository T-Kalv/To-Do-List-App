-- Program: To-Do_List_App.hs
-- Author: T-Kalv
-- Module: 
-- Email: 
-- Student Number: 
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- About
{-
A simple To-do list CLI app where users can add, remove and view tasks and save these tasks to a file by writing to a file and reading the file
-}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Tasks
-- Create a function for each of the tasks
-- Set a type for each of the tasks
-- Get user input by parsing the input using IO
-- Display a menu of options for a user to select e.g. View Tasks, Add Task, Remove Task, Mark Task As Complete, Mark Tasks As Incomplete, Save Tasks, Load Tasks
-- Read a file called tasks.txt that has all the tasks stored
-- Write to the file called tasks.txt that adds or remove tasks in that file based on the user prompt
-- When tasks are displayed, display then in order of the date due from the closest data from the current data


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Requirements
-- Display a menu of options for a user to select e.g. View Tasks, Add Task, Remove Task, Mark Task As Complete, Mark Tasks As Incomplete, Save Tasks, Load Tasks
-- Read a file called tasks.csv that has all the tasks stored
-- Write to the file called tasks.csv that adds or remove tasks in that file based on the user prompt
-- When user want to view tasks, the tasks are displayed in the order of the data due from the closest data from the current one
-- When user want to add a new task, they will select the add task and enter the TASK NAME, DATE DUE, DATE TO REMIND and the program will add that to a new list and then the program will fetch the current data and add that to the end of the list twice for DATE CREATED, DATE Modified and at the front of the list the program will add the TASK ID
-- The TASKID is generated by getting the first character of the TASK NAME and then concatenating to the DATE CREATED
-- Once the user had entered the required information for adding a new task the program will prompt the user to confirm before writing to the file and then displays the new task that has been added



-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Stepwise Refinement



-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Design



-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Pseudocode



-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- File Format:
-- TASKID, TASK NAME, DATE DUE, DATE TO REMIND, DATE CREATED, DATE MODIFIED


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
-- Code
import System.IO
import System.Process (callCommand) -- used to clear screen
import System.Info (os) -- checking system os
import Control.Concurrent (threadDelay) -- used for delaying
import Data.Time (getCurrentTime, formatTime, defaultTimeLocale) -- used to get current system time
import System.Directory (doesFileExist)

-- Task Data Type
data Task = Task {taskID :: String, taskName :: String, dateDue :: String, dateToRemind :: String, dateCreated :: String, dateModified :: String} deriving (Show)

-- Clearing Screen
clearScreen :: IO ()
clearScreen = do
    if os == "ming32" then -- Windows
        callCommand "cls"
    else
        callCommand "clear" -- Linux & MacOS

-- Display Options
displayOptions :: IO ()
displayOptions = do
    clearScreen -- clears screen
    putStrLn "To-Do List App"
    putStrLn "#############################"
    putStrLn "(1) View Tasks"
    putStrLn "(2) Add Task"
    putStrLn "(3) Remove Task"
    putStrLn "(4) Mark Tasks As Completed"
    putStrLn "(5) Mark Tasks As Incomplete"
    putStrLn "(6) EXIT"
    putStrLn "############################"
    putStrLn "Select An Option (1-6): "

-- Gets tasks from tasks.txt
getTasks :: IO [Task]
getTasks = do
    exists <- doesFileExist "tasks.txt"
    if not exists then return [] else do
        contents <- readFile "tasks.txt"
        let tasks = map parseTasks (lines contents)
        return tasks 

-- Parsing tasks from tasks.txt
parseTasks :: String -> Task
parseTasks line = 
    let [taskID, name, due, remind, created, modified] = splitComma line 
    in Task taskID name due remind created modified 

-- Split comma in file
splitComma :: String -> [String]
splitComma = splitOn ','
  where
    splitOn _ [] = []
    splitOn delimitter string =
        let (first, remainder) = break (== delimitter) string
        in first : case remainder of
            [] -> []
            (_:rest) -> splitOn delimitter rest

-- Add Task
addTask :: IO ()
addTask = do
    putStrLn "Enter Name Of New Task: "
    name <- getLine
    putStrLn "Enter Due Date (DD-MM-YY): "
    due <- getLine
    putStrLn "Enter Reminder Date (DD-MM-YY): "
    remind <- getLine
    currentTime <- getCurrentTime
    let creationDate = formatTime defaultTimeLocale "%d-%m-%Y %H:%M:%S" currentTime
    let modifiedDate = creationDate
    let taskID = head name : creationDate -- taskID generation: NEED TO FIX THIS AS THERE MAY BE DUPLICATES WHEN GENERATING!!!
    let newTaskLine = taskID ++ ", " ++ name ++ ", " ++ due ++ ", " ++ remind ++ ", " ++ creationDate ++ ", " ++ modifiedDate
    appendFile "tasks.txt" (newTaskLine ++ "\n")
    putStrLn "Task added successfully!"

-- View Tasks
viewTasks :: IO ()
viewTasks = do
    tasks <- getTasks
    if null tasks then putStrLn "You have not created any tasks before!" else do
        putStrLn "Current Tasks Left: "
        putStrLn "----------------------------"
        displayTasks tasks

-- Remove Task
removeTask :: IO ()
removeTask = do
    tasks <- getTasks
    if null tasks then
        putStrLn "No Tasks Stored Previously!"
    else do
        putStrLn "Current Tasks: "
        displayTasks tasks
        putStrLn "Enter TaskID of the task that you would like to delete: "
        taskToRemove <- getLine
        let taskToRemoveInfo = filter (\task -> taskID task == taskToRemove) tasks -- find the relevant taskID to remove
        if null taskToRemoveInfo then
            putStrLn "No task found with the given Task ID."
        else do
            let task = head taskToRemoveInfo 
            putStrLn $ "Selected Task To Remove: "
            putStrLn $ "Task ID: " ++ taskID task
            putStrLn $ "Name: " ++ taskName task
            putStrLn $ "Due Date: " ++ dateDue task
            putStrLn $ "Reminder Date: "
            putStrLn $ "Reminder Date: " ++ dateToRemind task
            putStrLn $ "Date Created: " ++ dateCreated task
            putStrLn $ "Date Modified: " ++ dateModified task
            putStrLn "Are you sure you would to remove this task? (y/n): "
            taskRemoveConfirm <- getLine
            if taskRemoveConfirm == "y" then do
                let updatedTasks = filter (\task -> taskID task /= taskToRemove) tasks
                updateTasksToFile updatedTasks
                putStrLn $ taskID task ++ " has been removed successfully!"  
            else
                putStrLn "No tasks were removed"


-- Update Tasks To File
updateTasksToFile :: [Task] -> IO ()
updateTasksToFile tasks = do
    let taskLines = map (\task -> taskID task ++ "," ++ taskName task ++ "," ++ dateDue task ++ "," ++ dateToRemind task ++ "," ++ dateCreated task ++ "," ++ dateModified task) tasks
    writeFile "tasks.txt" (unlines taskLines)

-- Display tasks
displayTasks :: [Task] -> IO ()
displayTasks [] = return () 
displayTasks (task:rest) = do
    putStrLn $ "Task ID: " ++ taskID task
    putStrLn $ "Name: " ++ taskName task
    putStrLn $ "Due Date: " ++ dateDue task
    putStrLn $ "Reminder Date: " ++ dateToRemind task
    putStrLn "-----------------------------"
    displayTasks rest
    threadDelay 2000000 

-- User input loop
userScreen :: IO ()
userScreen = do
    displayOptions
    userOption <- getLine
    case userOption of
        "1" -> viewTasks
        "2" -> addTask
        "3" -> removeTask
        "4" -> putStrLn "You chose: Mark Tasks as Completed"
        "5" -> putStrLn "You chose: Mark Tasks As Incomplete"
        "6" -> putStrLn "You chose: EXIT, Goodbye!"
        _   -> putStrLn "INVALID OPTION, ENTER A VALID OPTION!"

    -- Delay screen time so user can see what's being displayed
    threadDelay 2000000 
    clearScreen
    
    if userOption /= "6" then userScreen else return ()

-- Main function
main :: IO ()
main = do
    userScreen

